---
title: "brightness model"
format: html
editor: visual
---

## load and combine data

```{r}
library(tidyverse)
library(readxl)
library(naniar)
library(ape)
library(readxl)
library(tidyr)
# library(ggpubr)
# library(ade4)
library(vegan)
library(stringr)
library(brms)
library(dplyr)
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(tidybayes)
library(posterior)
```

# load csv with species names for checks

```{r}
species_names_df <- read.csv(here::here("species_names_checks.csv"))
species_names_df <- species_names_df %>% 
  rename(species = annotated_name)  %>%
  mutate(species_code = as.numeric(factor(species_name)))

species_names_df
```

# Load dataset

```{r}
df_load_raw <- read_excel(path = here::here("a_data/04april24_datalab.xlsx"), sheet = 3)

# df_load |> glimpse()


df_load_raw$nematode_count[which(df_load_raw$nematode_count == ">100")] <- "100"
df_load_raw$nematode_count <- as.numeric(df_load_raw$nematode_count)

df_load <- df_load_raw %>% 
  select(id, spp, nematode_count, island) %>% 
  rename(species = spp)

# correct species names
df_load <- df_load %>%
  left_join(species_names_df, by = "species")

df_load

```

load island info

```{r}
df_island <- read_excel(path = here::here("a_data/04april24_datalab.xlsx"), sheet = "island_characteristics")

# Rename the column "mean_emergence" to "island_age" in df_island
df_island <- df_island %>% rename(island_age = mean_emergence,
                                  island_area = area)

df_island

```

# brightness data

```{r}

df_kraemer <- read.csv(here::here("a_data/kraemer2019_brightness_scores.csv"))
df_kraemer <- df_kraemer %>% 
  select(location, spp, brightness, microhab) %>% 
  rename(id = location,
         species = spp)


# correct species names
df_kraemer_corrected <- df_kraemer %>%
  left_join(species_names_df, by = "species")

df_kraemer_corrected

```

# habitat data

### Habitat data from Kraemer 2019 database

### habitat data from RAD sequences database

```{r}
df_rad <- read_excel(here::here("a_data/GPS RAD snails.xlsx"))
df_rad <- df_rad %>% 
  select(Sample, Taxon, 
         habitat = Microhabitat, 
         vegetation = `Vegetation Zone`)%>% 
  rename(species = Taxon) %>% 
  glimpse() 


# correct species names
df_rad_corrected <- df_rad %>%
  left_join(species_names_df, by = "species")


# Semi-Arboreal is considered arboreal
df_rad_relevel_hab <- df_rad_corrected %>%
  mutate(habitat = str_to_lower(habitat)) %>% 
  mutate(habitat = str_replace(habitat, "semi-arboreal", "arboreal"))

df_rad_relevel_hab |> 
  count(habitat)

## we have a SECOND source for habitat data
df_rad_hab_filtered <- df_rad_relevel_hab %>%
  filter(habitat %in% c("arboreal", "terrestrial")) |> 
  select(species, microhab = habitat)

# select columns and combine
df_hab_combo_agg <- df_kraemer_corrected |>
  select(species_name, microhab) |> 
  bind_rows()|> 
  count(species_name, microhab) |> 
  pivot_wider(values_from = n, names_from = microhab, values_fill = 0) |> 
  mutate(total_hab = terrestrial + arboreal)

df_hab_combo_agg

```

```{r}
# repeat and relevel vegetation
df_rad_veg_agg <- df_rad_relevel_hab %>% 
  mutate(vegetation = str_to_lower(vegetation)) %>% 
  ## filter for only legal values -- others are typos
  filter(vegetation %in% c("humid", "arid")) |> 
  count(species_name, vegetation) |> 
  pivot_wider(values_from = n, names_from = vegetation, values_fill = 0) |> 
  mutate(total_veg = humid + arid)

df_rad_veg_agg

```

Only run the model for those species with brightness data.

```{r}

df_kraemer_corrected <- df_kraemer_corrected %>%
  filter(!is.na(species_name))

df_rad_veg_agg <- df_rad_veg_agg %>%
  filter(species_name != "")


df_rad_veg_agg <- df_rad_veg_agg %>%
  left_join(species_names_df, by = "species_name")



# vegetation dataset

df_hab_combo_agg <- df_hab_combo_agg %>%
  filter(species_name != "")

df_hab_combo_agg <- df_hab_combo_agg %>%
  left_join(species_names_df, by = "species_name")

```

Add island, island age and area to brightness database

```{r}

df_kraemer_corrected1 <- df_kraemer_corrected %>%
  left_join(df_load %>% select(species_name, island), by = "species_name") %>% 
  left_join(df_island %>% select(island, island_age, island_area), by = "island")


# Extract unique species_name and island pairs from df_load
species_island <- df_load %>%
  select(species_name, island) %>%
  distinct()

# Add island to df_kraemer_corrected based on species_name
df_kraemer_corrected1 <- df_kraemer_corrected %>%
  left_join(species_island, by = "species_name")

# Extract island age and area from df_island
island_info <- df_island %>%
  select(island, island_age, island_area)

# Add island age and area to df_kraemer_corrected based on island
df_kraemer_corrected1 <- df_kraemer_corrected1 %>%
  left_join(island_info, by = "island")

df_kraemer_corrected1

```

Eliminate those species for which island = NA

```{r}
df_kraemer_corrected1 <- df_kraemer_corrected1 %>%
  filter(!is.na(island))
```

# Model

Only consider species with brightness data

```{r}
species_in_kraemer <- unique(df_kraemer_corrected1$species_name)

# Filter df_rad_veg_agg to keep only the species in species_in_kraemer
df_rad_veg_agg_filtered <- df_rad_veg_agg %>%
  filter(species_name %in% species_in_kraemer)%>%
  distinct(species_name, .keep_all = TRUE)

# Filter df_hab_combo_agg to keep only the species in species_in_kraemer
df_hab_combo_agg_filtered <- df_hab_combo_agg %>%
  filter(species_name %in% species_in_kraemer)%>%
  distinct(species_name, .keep_all = TRUE)

```

## Intercepts-only model

```{r}

# Calculate number of observations and species
N <- nrow(df_kraemer_corrected1)             # Number of observations 
N_spp <- length(unique(df_kraemer_corrected1$species_code))  # Number of species 


# Data list for Stan model
data_list <- list(
  
  N = nrow(df_kraemer_corrected1),
  N_spp = length(unique(df_kraemer_corrected1$species_name)),
  spp_id = as.integer(factor(df_kraemer_corrected1$species_name)),
  N_islands = length(unique(df_kraemer_corrected1$island)),
  island_id = as.integer(factor(df_kraemer_corrected1$island)),
  brightness = df_kraemer_corrected1$brightness

)


```

Fit the model

```{r}
# Fit the model using cmdstanr
stan_model <- cmdstan_model(
  stan_file = here::here("c_codeStan/intercept_only_bright.stan"), 
  pedantic = TRUE
)

fit <- stan_model$sample(
  data = data_list,
  seed = 123,             
  chains = 4,               
  parallel_chains = 4,    
  iter_warmup = 1000,       
  iter_sampling = 2000   
)

```

```{r}
sigma_post <- fit$draws(
  variables = c("sigma_spp", "sigma_islands"))

sigma_post_df <- fit$draws(
  variables = c("sigma_spp", "sigma_islands"),
  format = "data.frame")

sigma_post_df |> 
  pivot_longer(starts_with("sigma"), 
               names_to = "sigma", 
               values_to = "value") |> 
  ggplot(aes(x = value)) + 
  geom_histogram() + 
  facet_wrap(~sigma)
```

```{r}
spp_avg_effects_df <- fit$draws(
  variables = c("mu", "spp_effects"),
  format = "data.frame")


spp_avg_effects_df |> 
  select(mu, starts_with("spp_effects")) |> 
  mutate(row_id = seq_along(mu)) |> 
  pivot_longer(-c("mu", "row_id"), 
               names_to = "parname", 
               values_to = "spp_effect") |> 
  mutate(spp_avg = mu + spp_effect) |> 
  ggplot(aes(x = spp_avg, group = parname)) + 
  geom_density()
```

## brightness model

```{r}
df_rad_veg_agg # vegetation counts  (27 spp)
df_hab_combo_agg # habitat counts   (23 spp)
df_kraemer_corrected1 # brightness scores (23 spp)

# Extract unique species names from df_kraemer_corrected1
species_names <- unique(df_kraemer_corrected1$species_name)

# Filter df_hab_combo_agg and df_rad_veg_agg
df_hab_combo_filtered <- df_hab_combo_agg %>%
  filter(species_name %in% species_names)  %>% 
  distinct(species_name, .keep_all = TRUE)

df_rad_veg_filtered <- df_rad_veg_agg %>%
  filter(species_name %in% species_names)  %>% 
  distinct(species_name, .keep_all = TRUE)
``` 


```{r}


# Create data_list
data_list <- list(
  N = nrow(df_kraemer_corrected1),
  N_spp = length(unique(df_kraemer_corrected1$species_name)),
  N_islands = length(unique(df_kraemer_corrected1$island)),
  N_habitat = nrow(df_hab_combo_agg_filtered),
  N_veg = nrow(df_rad_veg_agg_filtered),
  spp_id_bright = as.integer(factor(df_kraemer_corrected1$species_name)),
  island_id = as.integer(factor(df_kraemer_corrected1$island)),
  spp_id_hab = as.integer(factor(df_hab_combo_agg_filtered$species_name)),
  spp_id_veg = as.integer(factor(df_rad_veg_agg_filtered$species_name)),
  brightness = df_kraemer_corrected1$brightness,
  island_age = df_kraemer_corrected1$island_age,
  island_area = df_kraemer_corrected1$island_area,
  habitat_arboreal = as.integer(df_hab_combo_agg_filtered$arboreal),
#  habitat_terrestrial = as.integer(df_hab_combo_agg_filtered$terrestrial),
  vegetation_arid = as.integer(df_rad_veg_agg_filtered$arid),
#  vegetation_humid = as.integer(df_rad_veg_agg_filtered$humid),
  total_hab = df_hab_combo_agg_filtered$total_hab,
  total_veg = df_rad_veg_agg_filtered$total_veg
)


```

Fit the model

```{r}
# Fit the model using cmdstanr
stan_model <- cmdstan_model(
  stan_file = here::here("brightness_only.stan"), 
  pedantic = TRUE
)

fit <- stan_model$sample(
  data = data_list,
  seed = 123,             
  chains = 4,               
  parallel_chains = 4,    
  iter_warmup = 1000,       
  iter_sampling = 2000   
)

```



```{r}
# Extract the posterior samples
posterior_samples <- fit$draws()

# Convert to a data frame for easier handling
posterior_df <- as_draws_df(posterior_samples)

fit$summary()
# 
# # Rename mu_bright parameters for easier handling
# posterior_df1 <- posterior_df %>%
#   rename_with(~ gsub("\\[|\\]", "", .), starts_with("spp_effects"))

mcmc_areas(
  posterior_df,
  pars = vars(starts_with("slope")),
  prob = 0.8  # 80% intervals
)

```

Model for generated quantities

```{r}


# Fit the model using cmdstanr
stan_model <- cmdstan_model(
  stan_file = here::here("c_codeStan/generate_quantities_brightness.stan"), 
  pedantic = TRUE
)


multi_trip <- stan_model$generate_quantities(
  fitted_params = fit,
  data = data_list
)



```

```{r}

multi_trip$summary()
# Extract the predicted values from the Stan fit object
predicted_brightness <- multi_trip$draws("brightness_pred")

# Convert the extracted predictions to a format suitable for bayesplot

predicted_brightness <- as_draws_matrix(predicted_brightness)

# Posterior predictive check for nematode load
ppc_dens_overlay(y = df_kraemer_corrected1$brightness, yrep = predicted_brightness) +
  scale_color_manual(name = "Legend",
                     values = c("y" = "black", "yrep" = "orange"),
                     labels = c("Observed", "Predicted")) +
  scale_fill_manual(name = "Legend",
                    values = c("y" = "black", "yrep" = "orange"),
                    labels = c("Observed", "Predicted"))
```





## v2 model - hierarchical (prob veg, prob habitat), no constrain on slopes


```{r}

bright_v2_NCP_model <- cmdstan_model(
  stan_file = here::here("c_codeStan/brightness_only_v2_NCP.stan"), 
  pedantic = TRUE
)

fit_bright_v2_NCP <- bright_v2_NCP_model$sample(
  data = data_list,
  seed = 123,             
  chains = 4,               
  parallel_chains = 4,    
  iter_warmup = 1000,       
  iter_sampling = 2000   
)
```


```{r}
# Extract the posterior samples
posterior_samples <- fit_bright_v2_NCP$draws()


posterior_df <- as_draws_df(posterior_samples)

fit_bright_v2_NCP$diagnostic_summary()

fit_bright_v2_NCP$summary()

mcmc_areas(
  posterior_df,
  pars = vars(starts_with("slope")),
  prob = 0.8  
)

```


```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("arboreal")),
  prob = 0.8  
)
```

```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("arid")),
  prob = 0.8  
)
```



```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("slope"), 
              starts_with("spp"), 
              starts_with("z_"),
              starts_with("mu"), 
              starts_with("sigma"), 
              starts_with("beta")),
  prob = 0.8  
)
```









```{r}
posterior_samples <- fit_bright_v2_NCP$draws(variables = c("arboreal_prob", "arid_prob"))
posterior_df <- as_draws_df(posterior_samples)

# Calculate the mean or median of the posterior samples for each species
predicted_arboreal_prob <- posterior_df %>%
  select(starts_with("arboreal_prob")) %>%
  summarise_all(mean) %>%
  pivot_longer(cols = everything(), names_to = "species", values_to = "predicted_arboreal_prob")

predicted_arid_prob <- posterior_df %>%
  select(starts_with("arid_prob")) %>%
  summarise_all(mean) %>%
  pivot_longer(cols = everything(), names_to = "species", values_to = "predicted_arid_prob")


# add species' names to real data as in stan code (1 to 23)

df_hab_combo_agg_filtered <- df_hab_combo_agg_filtered %>% 
  mutate(sp_id_hab = as.integer(factor(species_name)))

df_rad_veg_agg_filtered <- df_rad_veg_agg_filtered %>% 
  mutate(sp_id_veg = as.integer(factor(species_name)))

# add species names that match the data (1 to 23)

predicted_arboreal_prob <- predicted_arboreal_prob %>% 
  mutate(sp_id_hab = seq_along(species))

predicted_arid_prob <- predicted_arid_prob %>% 
  mutate(sp_id_veg = seq_along(species))



# combine real data

df_hab_combo_agg_filtered
df_rad_veg_agg_filtered

real_data <- df_hab_combo_agg_filtered %>% 
  left_join(df_rad_veg_agg_filtered, by = "species_name")

# Merge the predicted probabilities with the real data
comparison_data <- real_data %>%
  left_join(predicted_arboreal_prob, by = "sp_id_hab") %>%
  left_join(predicted_arid_prob, by = "sp_id_veg") %>% 

```


```{r}
# Plot for arboreal probabilities
ggplot(comparison_data, aes(x = species_name)) +
  geom_point(aes(y = real_arboreal_prob, color = "Real"), size = 4) +
  geom_point(aes(y = predicted_arboreal_prob, color = "Predicted", size = 4)) +
  labs(title = "Arboreal Habitat Probabilities", y = "Probability", color = "Type") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Plot for arid probabilities
ggplot(comparison_data, aes(x = species_name)) +
  geom_point(aes(y = real_arid_prob, color = "Real"), size = 4) +
  geom_point(aes(y = predicted_arid_prob, color = "Predicted"), size = 4) +
  labs(title = "Arid Vegetation Probabilities", y = "Probability", color = "Type") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

Model for generated quantities

```{r}


# Fit the model using cmdstanr
bright_v2_NCP_gq <- cmdstan_model(
  stan_file = here::here("c_codeStan/generate_quantities_brightness_V2_NCP.stan"), 
  pedantic = TRUE
)


gq_V2_NCP <- bright_v2_NCP_gq$generate_quantities(
  fitted_params = fit,
  data = data_list
)



```



```{r}

gq_V2_NCP$summary()
# Extract the predicted values from the Stan fit object
predicted_brightness <- gq_V2_NCP$draws("brightness_pred")

# Convert the extracted predictions to a format suitable for bayesplot

predicted_brightness <- gq_V2_NCP$draws("brightness_pred")
predicted_habitat_arboreal <- gq_V2_NCP$draws("habitat_arboreal_pred")
predicted_vegetation_arid <- gq_V2_NCP$draws("vegetation_arid_pred")

# Posterior predictive check for nematode load
ppc_dens_overlay(y = df_kraemer_corrected1$brightness, yrep = predicted_brightness) +
  scale_color_manual(name = "Legend",
                     values = c("y" = "black", "yrep" = "orange"),
                     labels = c("Observed", "Predicted")) +
  scale_fill_manual(name = "Legend",
                    values = c("y" = "black", "yrep" = "orange"),
                    labels = c("Observed", "Predicted"))
```


## v2 logit model - hierarchical (prob veg, prob habitat), no constrain on slopes, logit distrib for spp and island random effects


```{r}

bright_logit_model <- cmdstan_model(
  stan_file = here::here("c_codeStan/brightness_only_logit.stan"), 
  pedantic = TRUE
)

fit_bright_logit <- bright_logit_model$sample(
  data = data_list,
  seed = 123,             
  chains = 4,               
  parallel_chains = 4,    
  iter_warmup = 1000,       
  iter_sampling = 2000   
)
```


```{r}
# Extract the posterior samples
posterior_samples <- fit_bright_logit$draws()


posterior_df <- as_draws_df(posterior_samples)

fit_bright_v2_NCP$diagnostic_summary()

fit_bright_v2_NCP$summary()

mcmc_areas(
  posterior_df,
  pars = vars(starts_with("slope")),
  prob = 0.8  
)

```

```{r}
mcmc_areas(
  posterior_df,
  pars = vars(contains("arboreal_prob[")),
  prob = 0.8  
)
```

```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("arid_prob[")),
  prob = 0.8  
)
```




## logit_NCP model - hierarchical (prob veg, prob habitat), no constrain on slopes, logit distrib for spp and NCP correction for island random effects


```{r}

bright_logit_NCP_model <- cmdstan_model(
  stan_file = here::here("c_codeStan/brightness_logit_NCP.stan"), 
  pedantic = TRUE
)

fit_bright_logit_NCP <- bright_logit_NCP_model$sample(
  data = data_list,
  seed = 123,             
  chains = 4,               
  parallel_chains = 4,    
  iter_warmup = 1000,       
  iter_sampling = 2000   
)
```


```{r}
# Extract the posterior samples
posterior_samples <- fit_bright_logit_NCP$draws()


posterior_df <- as_draws_df(posterior_samples)

fit_bright_logit_NCP$diagnostic_summary()

fit_bright_logit_NCP$summary()

mcmc_areas(
  posterior_df,
  pars = vars(starts_with("slope")),
  prob = 0.8  
)

```

```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("arboreal_prob[")),
  prob = 0.8  
)
```

```{r}
mcmc_areas(
  posterior_df,
  pars = vars(starts_with("arid_prob[")),
  prob = 0.8  
)
```



Generate quantities

Model for generated quantities

```{r}


# Fit the model using cmdstanr
bright_logit_NCP_gq <- cmdstan_model(
  stan_file = here::here("c_codeStan/gq_brightness_logit_NCP.stan"), 
  pedantic = TRUE
)


gq_logit_NCP <- bright_logit_NCP_gq$generate_quantities(
  fitted_params = fit,
  data = data_list
)



```



```{r}

gq_V2_NCP$summary()
# Extract the predicted values from the Stan fit object
predicted_brightness <- gq_V2_NCP$draws("brightness_pred")

# Convert the extracted predictions to a format suitable for bayesplot

predicted_brightness <- gq_V2_NCP$draws("brightness_pred")
predicted_habitat_arboreal <- gq_V2_NCP$draws("habitat_arboreal_pred")
predicted_vegetation_arid <- gq_V2_NCP$draws("vegetation_arid_pred")

# Posterior predictive check for nematode load
ppc_dens_overlay(y = df_kraemer_corrected1$brightness, yrep = predicted_brightness) +
  scale_color_manual(name = "Legend",
                     values = c("y" = "black", "yrep" = "orange"),
                     labels = c("Observed", "Predicted")) +
  scale_fill_manual(name = "Legend",
                    values = c("y" = "black", "yrep" = "orange"),
                    labels = c("Observed", "Predicted"))
```





```{r}
posterior_samples <- fit_bright_logit_NCP$draws(variables = c("arboreal_prob", "arid_prob"))
posterior_df <- as_draws_df(posterior_samples)

# Calculate the mean or median of the posterior samples for each species
predicted_arboreal_prob <- posterior_df %>%
  select(starts_with("arboreal_prob")) %>%
  summarise_all(mean) %>%
  pivot_longer(cols = everything(), names_to = "species", values_to = "arboreal_prob")

predicted_arid_prob <- posterior_df %>%
  select(starts_with("arid_prob")) %>%
  summarise_all(mean) %>%
  pivot_longer(cols = everything(), names_to = "species", values_to = "arid_prob")


# add species' names to real data as in stan code (1 to 23)

df_hab_combo_agg_filtered <- df_hab_combo_agg_filtered %>% 
  mutate(sp_id_hab = as.integer(factor(species_name)))

df_rad_veg_agg_filtered <- df_rad_veg_agg_filtered %>% 
  mutate(sp_id_veg = as.integer(factor(species_name)))

# add species names that match the data (1 to 23)

predicted_arboreal_prob <- predicted_arboreal_prob %>% 
  mutate(sp_id_hab = seq_along(species))

predicted_arid_prob <- predicted_arid_prob %>% 
  mutate(sp_id_veg = seq_along(species))



# combine real data

df_hab_combo_agg_filtered
df_rad_veg_agg_filtered

real_data <- df_hab_combo_agg_filtered %>% 
  left_join(df_rad_veg_agg_filtered, by = "species_name")

# Merge the predicted probabilities with the real data
comparison_data <- real_data %>%
  left_join(predicted_arboreal_prob, by = "sp_id_hab") %>%
  left_join(predicted_arid_prob, by = "sp_id_veg")

```


```{r}
# Plot for arboreal probabilities
ggplot(comparison_data, aes(x = species_name)) +
  geom_point(aes(y = real_arboreal_prob, color = "Real"), size = 4) +
  geom_point(aes(y = predicted_arboreal_prob, color = "Predicted", size = 4)) +
  labs(title = "Arboreal Habitat Probabilities", y = "Probability", color = "Type") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Plot for arid probabilities
ggplot(comparison_data, aes(x = species_name)) +
  geom_point(aes(y = real_arid_prob, color = "Real"), size = 4) +
  geom_point(aes(y = predicted_arid_prob, color = "Predicted"), size = 4) +
  labs(title = "Arid Vegetation Probabilities", y = "Probability", color = "Type") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```