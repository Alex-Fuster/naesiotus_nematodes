---
title: "Model load"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup-packages}
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(naniar)
library(cmdstanr)
library(bayesplot)
library(tidybayes)
library(posterior)
library(ggpubr)
library(phytools)
library(ape)

```

parameters for plotting

```{r}
my_theme<-theme(axis.text=element_text(size=12),
        axis.title = element_text(size = 14),
        legend.text=element_text(size=10),
        legend.title = element_text(size=12),
        plot.title = element_text(face="bold",size=14,margin=margin(0,0,20,0),hjust = 0.5),
        axis.title.y = element_text(hjust = 0.5),
        axis.title.x = element_text(hjust = 0.5))
```



## compute species code id

```{r}
species_names_df_raw <- read.csv(here::here("data/species_names_checks.csv"))

# we're dropping the species with no name in this database. 
# this indicates morphospecies which have no formal name
species_names_df <- species_names_df_raw %>% 
  rename(species = annotated_name)  %>% 
  filter(species_name != "") |> 
  mutate(species_code = as.numeric(factor(species_name)))

species_code_df <- species_names_df |> 
  select(species_name, species_code) |> 
  distinct() |> 
  arrange(species_code)

species_code_df
```

-   correct "sp. nov. Volc\xe1n Wolf 3" in the datasets

## island info

```{r}
df_island <- read_excel(path = here::here("data/19july24_datalab.xlsx"), sheet = "island_characteristics")

# Rename the column "mean_emergence" to "island_age" in df_island
# add an ID column
df_island <- df_island %>% rename(island_age = mean_emergence,
                                  island_area = area) |> 
  mutate(island_code = as.numeric(as.factor(island)))

df_island

```

## Parasite Load dataset

```{r}
df_load_raw <- read_excel(path = here::here("data/19july24_datalab.xlsx"), sheet = 3)

# df_load |> glimpse()


df_load_raw$nematode_count[which(df_load_raw$nematode_count == ">100")] <- "100"
df_load_raw$nematode_count <- as.numeric(df_load_raw$nematode_count)

df_load_rename <- df_load_raw %>% 
  select(id, spp, nematode_count, island) %>% 
  rename(species = spp)

# correct species names
df_load <- df_load_rename %>%
  left_join(species_names_df |> select(species, species_code),
            by = "species")
df_load

```

## Island + species information

Previously we merged all the data on islands into the load dataset, but in the last bit of code above we depart from this.
Here we are adding only the island code. 
Island level data will instead be added to the species data, since it is used in calculations at the species level:

HOWEVER, species-island associations are only found in the load dataset

```{r}
sp_code_island_df <- df_load |> 
  select(species, species_code, island) |> 
  distinct() |> 
  left_join(df_island)

sp_code_island_df |> 
  head() |> 
  knitr::kable()
```

## Brightness data

```{r}

df_bright_raw <- read_csv(here::here("data/kraemer2019_brightness_scores.csv"))
df_bright <- df_bright_raw %>% 
  select(location, spp, brightness, microhab) %>% 
  rename(id = location,
         species = spp) %>%
  left_join(species_names_df |> select(species, species_code), by = "species")

df_bright


```

In this dataset it seems that the MAJORITY of observations don't have a species name. 
Is that correct??

```{r}
df_bright |> count(species_code) |> 
  arrange(desc(n))
```

That's a lot of data to lose! 

```{r}
df_bright_noNA <- df_bright |> 
  drop_na(species_code)
```



```{r}
df_rad_raw <- read_excel(here::here("data/GPS RAD snails.xlsx"))
df_rad_rename <- df_rad_raw %>% 
  select(Sample, Taxon, 
         habitat = Microhabitat, 
         vegetation = `Vegetation Zone`)%>% 
  rename(species = Taxon) %>% 
  glimpse() |> 
  left_join(species_names_df |> select(species, species_code), by = "species") |> # correct species names
  mutate(habitat = str_to_lower(habitat)) %>% 
  mutate(habitat = str_replace(habitat, "semi-arboreal", "arboreal")) |> # Semi-Arboreal is considered arboreal
  filter(habitat %in% c("arboreal", "terrestrial"))
```


#### warning! 

There should be no species in this list that are not found in the master species list! 
However we are missing the following in the species list

```{r}
df_rad_rename |> 
  filter(is.na(species_code))
```


for now we are dropping them

```{r}
df_rad_rename_noNA <- df_rad_rename |> 
  drop_na(species_code)
```



```{r}
df_hab <-  bind_rows(df_bright_noNA |> 
                       select(microhab, species_code),
                     df_rad_rename_noNA |> 
                       select(microhab = habitat, species_code)
) |> # add habitat data from brightness dataset 
  count(microhab, species_code) |> 
  pivot_wider(values_from = n, names_from = microhab, values_fill = 0) |> 
  mutate(total_hab = terrestrial + arboreal)

df_hab
```

### Vegetation data

the Rad dataset is where the data on vegetation come from 

Previously we filtered for only the vegetation types spelled "humid" or "arid", but now (19 August 2024)
there seems to be no different spellings of these in the dataset. 
Were they corrected in the original spreadsheet?


```{r}

df_veg <- df_rad_rename_noNA %>% 
  select(Sample, species, 
         habitat, vegetation)%>% 
  # glimpse() |> 
  left_join(species_names_df |> 
              select(species, species_code), by = "species") |> # correct species names
  # glimpse() |> 
  mutate(vegetation = str_to_lower(vegetation)) |> 
  # filter(vegetation %in% c("humid", "arid")) |> ## filter for only legal values -- others are typos
  count(species_code, vegetation) |> 
  pivot_wider(values_from = n, names_from = vegetation, values_fill = 0) |> 
  mutate(total_veg = humid + arid)

df_veg

```

## Summary of datasets

We now have all the datasets that we need to build the model. 

#### Vegetation data

```{r}
df_veg |> head() |> knitr::kable()
```

This dataset contains `r sum(df_veg$total_veg)` observations of `r nrow(df_veg)` species.

#### Habitat data

```{r}
df_hab |> head() |> knitr::kable()
```

This dataset contains `r sum(df_hab$total_hab)` observations of `r nrow(df_hab)` species.

#### species and island data

This is the only dataset to contain one row per species with no missing species. It gives us the 

```{r}
sp_code_island_df |> 
  head() |> 
  knitr::kable()
```

#### brightness data

```{r}
df_bright_noNA |> head() |> knitr::kable()
```

# Models

Building up slowly from a simple model -- unfortunately, the only way I know how to do this kind of work.

## Model of microhabitat

```{r}
#| class-output: stan
all_spp_arbor <- cmdstan_model(here::here("stan/all_spp_arbor.stan"))

all_spp_arbor
```


```{r}
all_spp_arbor_samp <- all_spp_arbor$sample(
  data = list(
    N_spp = nrow(sp_code_island_df),
    sp_id = sp_code_island_df$species_code,
    N_habitat = nrow(df_hab),
    habitat_arboreal = df_hab$arboreal,
    total_hab = df_hab$total_hab,
    sp_index_hab = df_hab$species_code
  ),
chains = 4, parallel_chains = 4, refresh = 0
)
```

## Model of microhabitat and veg zone


```{r}
#| class-output: stan
all_spp_arbor_veg <- cmdstan_model(here::here("stan/all_spp_arbor_veg.stan"))

all_spp_arbor_veg
```


```{r}
all_spp_arbor_veg_samp <- all_spp_arbor_veg$sample(
  data = list(
    N_spp = nrow(sp_code_island_df),
    sp_id = sp_code_island_df$species_code,
    # microhabitat
    N_habitat = nrow(df_hab),
    habitat_arboreal = df_hab$arboreal,
    total_hab = df_hab$total_hab,
    sp_index_hab = df_hab$species_code,
    # veg zone
    N_veg = nrow(df_veg),
    veg_arid = df_veg$arid,
    total_veg = df_veg$total_veg,
    sp_index_veg = df_veg$species_code
  ),
  chains = 4, parallel_chains = 4, refresh = 0
)
```

### Quick parameter visualization

The second model uses both arid and arboreal data. I want to extract those species-specific probabilities and examine them.

```{r}
#| fig-cap: po
all_spp_arbor_veg_samp |> 
  tidybayes::gather_rvars(arid_prob[sp], arboreal_prob[sp]) |> 
  ggplot(aes(x = sp, ydist = .value)) + 
  stat_pointinterval() + 
  facet_wrap(~.variable)
```

```{r}
all_spp_arbor_veg_samp |> 
  tidybayes::spread_rvars(arid_prob[sp], arboreal_prob[sp]) |> 
  mutate_all(.funs = median) |> 
  ggplot(aes(x = arid_prob, y = arboreal_prob)) + geom_point()
```

A few things to note:

* species which are undersampled get probabilities equal to the prior. This is because the model has no phylogenetic structure and no correlation structure either
* species which lack data for one of these two variables usually lack it for the other as well
* most species are 100% or 0% on these two variables, with relatively little in between.

## Model of Brightness, microhab, veg zone

```{r}
#| class-output: stan
all_spp_arbor_veg_bright <- cmdstan_model(here::here("stan/all_spp_arbor_veg_bright.stan"),
                                          pedantic = TRUE)

all_spp_arbor_veg_bright
```


```{r}
all_spp_arbor_veg_bright_samp <- all_spp_arbor_veg_bright$sample(
  data = list(
    N_spp = nrow(sp_code_island_df),
    N_island = max(sp_code_island_df$island_code),
    sp_id = sp_code_island_df$species_code,
    island_area = sp_code_island_df$island_area,
    island_age = sp_code_island_df$island_age,
    island_index_spp = sp_code_island_df$island_code,
    # microhabitat
    N_habitat = nrow(df_hab),
    habitat_arboreal = df_hab$arboreal,
    total_hab = df_hab$total_hab,
    sp_index_hab = df_hab$species_code,
    # veg zone
    N_veg = nrow(df_veg),
    veg_arid = df_veg$arid,
    total_veg = df_veg$total_veg,
    sp_index_veg = df_veg$species_code,
    # brightness data
    N_bright = nrow(df_bright_noNA), 
    brightness_obs = df_bright_noNA$brightness,
    sp_index_bright = df_bright_noNA$species_code
  ),
  chains = 4, parallel_chains = 4, refresh = 0
)
```

let's look now at species brightness predictions from this model

```{r}
bright_rvars <- all_spp_arbor_veg_bright_samp |> 
  tidybayes::gather_rvars(true_ln_bright[species_code]) |> 
  mutate(brightness = exp(.value),
         species_code = forcats::fct_reorder(as.character(species_code), .value))

##################
# Create a named vector for species names
species_code_to_name <- setNames(sp_code_island_df$species, sp_code_island_df$species_code)

# Replace species codes with species names in bright_rvars
bright_rvars <- bright_rvars %>%
  mutate(species_name = species_code_to_name[as.character(species_code)])

# Replace species codes with species names in df_bright_noNA
df_bright_noNA <- df_bright_noNA %>%
  mutate(species_name = species_code_to_name[as.character(species_code)])
#################

post_bright <- bright_rvars |> 
  ggplot(aes(x = species_name, ydist = brightness)) + 
  stat_pointinterval() + 
  scale_y_log10()

post_bright <- post_bright + 
  geom_point(aes(x = species_name, y = brightness), inherit.aes = FALSE, 
             data = df_bright_noNA, 
             colour = "red",
             size = .5, alpha = .5,
             position = position_jitter(width = .3)) +
  theme_minimal() +
  my_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  xlab(NULL)




```



# Adding phylogenetic information


Load data

```{r}

# tree file
tree <- read.tree(here::here("data/phylogeny_2022/22Nov_Naesiotus.nwk"))

tree<- as.phylo(tree)


# codes for the tip names
df_rads <- read_excel(here::here("data/GPS RAD snails.xlsx"))

# load
df_load <- read_excel(here::here("data/19july24_datalab.xlsx"), sheet = 3)
df_load$nematode_count[which(df_load$nematode_count == ">100")] <- "100"
df_load$nematode_count <- as.numeric(df_load$nematode_count)

```

Correct names in the RAD database 

```{r}
# Names checks

#df_rads[which(df_rads$Taxon == "albermarlensis"),] <- "albemarlensis"
df_rads[which(df_rads$Taxon == "cf. albemarlensis"),"Taxon"] <- "albemarlensis"

#df_rads[which(df_rads$Taxon == "ustulatus pallescens"),] <- "ustulatus"
#df_rads[which(df_rads$Taxon == "ustulatus phlegonis"),] <- "ustulatus"
#df_rads[which(df_rads$Taxon == "ustulatus mahogany"),] <- "ustulatus"

df_rads[which(df_rads$Taxon == "invalidus 1"),"Taxon"] <- "invalidus"
df_rads[which(df_rads$Taxon == "invalidus 2"),"Taxon"] <- "invalidus"

df_rads[which(df_rads$Taxon == "sculpturatus 1"),"Taxon"] <- "sculpturatus"
df_rads[which(df_rads$Taxon == "sculpturatus 2"),"Taxon"] <- "sculpturatus"
df_rads[which(df_rads$Taxon == "sculpturatus 3"),"Taxon"] <- "sculpturatus"

df_rads[which(df_rads$Taxon == "wolfi 1"),"Taxon"] <- "wolfi"
df_rads[which(df_rads$Taxon == "wolfi 2"),"Taxon"] <- "wolfi"
df_rads[which(df_rads$Taxon == "wolfi 3"),"Taxon"] <- "wolfi"

df_rads[which(df_rads$Taxon == "cf. perspectivus"),"Taxon"] <- "perspectivus"
df_rads[which(df_rads$Taxon == "perspectivus 1"),"Taxon"] <- "perspectivus"
df_rads[which(df_rads$Taxon == "perspectivus 2"),"Taxon"] <- "perspectivus"

df_rads[which(df_rads$Taxon == "cf. amastroides"),"Taxon"] <- "amastroides"

df_rads[which(df_rads$Taxon == "canaliferus 1"),"Taxon"] <- "canaliferus"
df_rads[which(df_rads$Taxon == "canaliferus 2"),"Taxon"] <- "canaliferus"

df_rads[which(df_rads$Taxon == "simrothi 1"),"Taxon"] <- "simrothi"
df_rads[which(df_rads$Taxon == "simrothi 2"),"Taxon"] <- "simrothi"

df_rads[which(df_rads$Taxon == "cf. tortuganus"),"Taxon"] <- "tortuganus"

df_rads[which(df_rads$Taxon == "cf. nux"),"Taxon"] <- "nux"

```



```{r}
# Create a mapping between Sample and Taxon
sample_to_taxon <- setNames(df_rads$Taxon, df_rads$Sample)

```


```{r}
# Replace tip labels in the tree with corresponding taxa
tree$tip.label <- sample_to_taxon[tree$tip.label]

plot(tree)
```



Prune tree, discarting those species not assessed for load

```{r}
pruned.tree<-drop.tip(tree, setdiff(tree$tip.label, sp_code_island_df$species))

plot(pruned.tree)
```



Create a phylogenetic covariance matrix

```{r}
# Calculate the phylogenetic covariance matrix
phylo_cov_matrix <- vcv(pruned.tree, corr = TRUE)
```

- Some species are assigned to more than one tree node (different sequences within a described taxa). I choose one of them at random because these are all sister species, so it should not affect the distances with others.
- except for sculpturatus, which appears in quite different places - I therefore discard it.

```{r}
# Convert the row/column names of the covariance matrix to a data frame for easier manipulation
cov_names <- data.frame(species_name = gsub("_.*", "", rownames(phylo_cov_matrix)), 
                        original_name = rownames(phylo_cov_matrix))

# Identify species with multiple nodes
multiple_cov <- cov_names %>%
  group_by(species_name) %>%
  filter(n() > 1)

# Randomly choose one node for each species with multiple entries, excluding "sculpturatus"
set.seed(123)  # Set seed for reproducibility
chosen_cov <- multiple_cov %>%
  filter(species_name != "sculpturatus") %>%
  slice_sample(n = 1)

# Add back singletons (species with only one node) and exclude "sculpturatus"
final_cov <- cov_names %>%
  anti_join(multiple_cov, by = "original_name") %>%  # Keep species with only one node
  bind_rows(chosen_cov) %>%
  filter(species_name != "sculpturatus")  # Remove "sculpturatus"

# Subset the covariance matrix to keep only the selected nodes
selected_names <- final_cov$original_name
phylo_cov_matrix_final <- phylo_cov_matrix[selected_names, selected_names]
```




```{r}
# Match species in the tree to the species in your data
tree_species <- colnames(phylo_cov_matrix_final)
dataset_species <- sp_code_island_df$species

# Ensure the order matches your dataset
species_match <- match(dataset_species, tree_species)
phylo_cov_matrix_final <- phylo_cov_matrix_final[species_match, species_match]

colnames(phylo_cov_matrix_final) <- dataset_species
rownames(phylo_cov_matrix_final) <- dataset_species

# Replace NA values in the final covariance matrix with zeros
phylo_cov_matrix_final[is.na(phylo_cov_matrix_final)] <- 0

```


change species names to species codes in the covariance matrix

```{r}
# Create a named vector to map species names to species codes
name_to_code <- setNames(sp_code_island_df$species_code, sp_code_island_df$species)
# Replace the row and column names in phylo_cov_matrix_final with species codes
rownames(phylo_cov_matrix_final) <- name_to_code[rownames(phylo_cov_matrix_final)]
colnames(phylo_cov_matrix_final) <- name_to_code[colnames(phylo_cov_matrix_final)]

# Add a small value to the diagonal elements of the covariance matrix to make it positive definite
epsilon <- 1e-6  # Regularization constant (can be adjusted)
phylo_cov_matrix_final <- phylo_cov_matrix_final + diag(epsilon, nrow(phylo_cov_matrix_final))


eigen_values <- eigen(phylo_cov_matrix_final)$values
print(eigen_values)

```



# model brightness adding phylogenetic information

```{r}
#| class-output: stan
all_spp_arbor_veg_bright_phylo <- cmdstan_model(here::here("stan/all_spp_arbor_veg_bright_phylo.stan"),
                                          pedantic = TRUE)

all_spp_arbor_veg_bright_phylo
```

data

```{r}
# Data code including phylogenetic covariance matrix
all_spp_arbor_veg_bright_phylo_samp <- all_spp_arbor_veg_bright_phylo$sample(
  data = list(
    N_spp = nrow(sp_code_island_df),  # Number of species (47)
    N_island = max(sp_code_island_df$island_code),
    sp_id = sp_code_island_df$species_code,
    island_area = sp_code_island_df$island_area,
    island_age = sp_code_island_df$island_age,
    island_index_spp = sp_code_island_df$island_code,
    # microhabitat
    N_habitat = nrow(df_hab),
    habitat_arboreal = df_hab$arboreal,
    total_hab = df_hab$total_hab,
    sp_index_hab = df_hab$species_code,
    # veg zone
    N_veg = nrow(df_veg),
    veg_arid = df_veg$arid,
    total_veg = df_veg$total_veg,
    sp_index_veg = df_veg$species_code,
    # brightness data
    N_bright = nrow(df_bright_noNA), 
    brightness_obs = df_bright_noNA$brightness,
    sp_index_bright = df_bright_noNA$species_code,
    # phylogenetic covariance matrix
    phylo_cov_matrix = phylo_cov_matrix_final  # Include the phylogenetic covariance matrix
  ),
  chains = 4, parallel_chains = 4, refresh = 0
)

```



```{r}
bright_rvars_phylo <- all_spp_arbor_veg_bright_phylo_samp |> 
  tidybayes::gather_rvars(true_ln_bright[species_code]) |> 
  mutate(brightness = exp(.value),
         species_code = forcats::fct_reorder(as.character(species_code), .value))


##################
# Create a named vector for species names
species_code_to_name <- setNames(sp_code_island_df$species, sp_code_island_df$species_code)

# Replace species codes with species names in bright_rvars
bright_rvars_phylo <- bright_rvars_phylo %>%
  mutate(species_name = species_code_to_name[as.character(species_code)])

# Replace species codes with species names in df_bright_noNA
df_bright_noNA <- df_bright_noNA %>%
  mutate(species_name = species_code_to_name[as.character(species_code)])
#################

post_bright_phylo <- bright_rvars_phylo |> 
  ggplot(aes(x = species_name, ydist = brightness)) + 
  stat_pointinterval() + 
  scale_y_log10()

post_bright_phylo <- post_bright_phylo + 
  geom_point(aes(x = species_name, y = brightness), inherit.aes = FALSE, 
             data = df_bright_noNA, 
             colour = "red",
             size = .5, alpha = .5,
             position = position_jitter(width = .3)) +
  theme_minimal() +
  my_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  xlab(NULL)

```





compare predicted brightness with and without phylogenetic information

```{r}

ggarrange(
  post_bright,
  post_bright_phylo,
  ncol = 1,
  nrow = 2,
  labels = LETTERS[1:2]
)

```




#####################


# Add nematode load



```{r}
# Ensure df_load has the species_code and island_code columns
df_load <- df_load %>%
  left_join(sp_code_island_df %>% select(species, island_code), 
            by = "species")
```



```{r}
#| class-output: stan
all_spp_load_phylo <- cmdstan_model(here::here("stan/all_spp_load_phylo.stan"),
                                          pedantic = TRUE)

all_spp_load_phylo
```


```{r}

# Data code including phylogenetic covariance matrix
all_spp_load_samp <- all_spp_load_phylo$sample(
  data = list(
  N_spp = nrow(sp_code_island_df),  # Number of species (47)
  N_island = max(sp_code_island_df$island_code),
  sp_id = sp_code_island_df$species_code,
  island_area = sp_code_island_df$island_area,
  island_age = sp_code_island_df$island_age,
  island_index_spp = sp_code_island_df$island_code,
  
  # Habitat data
  N_habitat = nrow(df_hab),
  habitat_arboreal = df_hab$arboreal,
  total_hab = df_hab$total_hab,
  sp_index_hab = df_hab$species_code,
  
  # Vegetation zone data
  N_veg = nrow(df_veg),
  veg_arid = df_veg$arid,
  total_veg = df_veg$total_veg,
  sp_index_veg = df_veg$species_code,
  
  # Brightness data
  N_bright = nrow(df_bright_noNA), 
  brightness_obs = df_bright_noNA$brightness,
  sp_index_bright = df_bright_noNA$species_code,
  
  # Nematode load data
  N_load = nrow(df_load),  # Total observations for nematode load
  nematode_count = df_load$nematode_count,
  sp_index_load = df_load$species_code,  # Use species_code from df_load
  island_index_load = df_load$island_code,  # Use island_code from df_load
  
  # Phylogenetic covariance matrix
  phylo_cov_matrix = phylo_cov_matrix_final  # Phylogenetic covariance matrix
),
  chains = 4, parallel_chains = 4, refresh = 0
)



```


```{r}

# Extract the predicted values from the Stan fit object
predicted_brightness <- all_spp_load_samp$draws("true_ln_bright")
predicted_load <- all_spp_load_samp$draws("predicted_nematode_load")

# Convert the extracted predictions to a format suitable for bayesplot
predicted_load <- as_draws_matrix(predicted_load)
predicted_brightness <- as_draws_matrix(predicted_brightness)

# Posterior predictive check for nematode load
ppc_load <-  ppc_dens_overlay(y = df_load$nematode_count, yrep = predicted_load) +
  scale_color_manual(name = "Legend",
                     values = c("y" = "black", "yrep" = "blue"),
                     labels = c("Observed load", "Predicted load")) +
  scale_fill_manual(name = "Legend",
                    values = c("y" = "black", "yrep" = "blue"),
                    labels = c("Observed load", "Predicted load"))+
  my_theme

# Posterior predictive check for brightness
observed_brightness <- df_bright$brightness
ppc_brightness <- ppc_dens_overlay(y = observed_brightness, yrep = predicted_brightness) +
  scale_color_manual(name = "Legend",
                     values = c("y" = "black", "yrep" = "coral"),
                     labels = c("Observed brightness", "Predicted brightness")) +
  scale_fill_manual(name = "Legend",
                    values = c("y" = "black", "yrep" = "coral"),
                    labels = c("Observed brightness", "Predicted brightness"))+
  xlim(0,60000)
  my_theme


ppc_plots_load_bright <- ggarrange(
  
  ppc_load,
  ppc_brightness,
  labels = LETTERS[1:2],
  ncol = 1,
  nrow = 2
)

ppc_plots_load_bright


```

